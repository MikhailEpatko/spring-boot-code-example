image: docker:latest

variables:

  APP_PORT: "app-port"

  VERBOSE: "false"
  ATRIFACT: ${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA}
  TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest
  PREVIOUS_CANDIDATE_IMAGE: $CI_REGISTRY_IMAGE:previous-candidate
  PREVIOUS_IMAGE: $CI_REGISTRY_IMAGE:previous
  SSH_USER: gitlab
  TEST_RESPONSE: "{\"status\":\"UP\"*"
  DOCKER_RUN_TEMPLATE: '"docker run
                        -d
                        --name $CI_PROJECT_NAME
                        -p $APP_PORT:$APP_PORT
                        $IMAGE_NAME
                        -VERBOSE $VERBOSE
                        -APP_PORT $APP_PORT
                        -PROJECT $CI_PROJECT_NAME
                        -ENVIRONMENT_NAME $ENVIRONMENT_NAME
                        -ELASTICSEARCH_HOST $ELASTICSEARCH_HOST
                        -INFLUXDB_HOST $INFLUXDB_HOST
                        -INFLUXDB_USERNAME $INFLUXDB_USERNAME
                        -INFLUXDB_PASSWORD $INFLUXDB_PASSWORD
                        --server.port=$APP_PORT
                        --spring.data.tarantool.username=$D_TARANTOOL_USERNAME
                        --spring.data.tarantool.password=$D_TARANTOOL_PASSWORD
                        --spring.data.tarantool.host=$D_TARANTOOL_HOST
                        --spring.data.tarantool.port=$D_TARANTOOL_PORT"'


stages:
  - build
  - test
  - build-image
  - release-image
  - deploy
  - after-deploy

before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle

cache:
  paths:
    - .gradle/wrapper
    - .gradle/caches

build:
  stage: build
  script:
    - ./gradlew assemble
  artifacts:
    paths:
      - build/libs/widget-action-0.0.1-SNAPSHOT.jar
    expire_in: 1 week
  only:
    - master
  image: java:8-jdk

build-image:
  stage: build-image
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN example-host.ru:88889
  script:
    - cp service/filebeat.yml docker/
    - cp service/telegraf.conf docker/
    - cp build/libs/widget-action-0.0.1-SNAPSHOT.jar docker/
    - docker build
      --pull
      -t ${TEST_IMAGE}
      docker
    - docker push ${TEST_IMAGE}

release-image:
  stage: release-image
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN example-host.ru:88889
  script:
    - docker pull $RELEASE_IMAGE || true
    - docker tag $RELEASE_IMAGE $PREVIOUS_CANDIDATE_IMAGE || true
    - docker push $PREVIOUS_CANDIDATE_IMAGE || true
    - docker pull $TEST_IMAGE
    - docker tag $TEST_IMAGE $RELEASE_IMAGE
    - docker push $RELEASE_IMAGE
  only:
    - master
  variables:
    GIT_STRATEGY: none

deploy-production:
  stage: deploy
  before_script:
    - which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo "$SSH_SERVER_HOSTKEYS" > ~/.ssh/known_hosts'
    - ssh -p $PRODUCTION_SSH_PORT $SSH_USER@$PRODUCTION_HOST docker login -u gitlab-ci-token -p $CI_JOB_TOKEN example-host.ru:88889
    - ssh -p $PRODUCTION_SSH_PORT $SSH_USER@$PRODUCTION_HOST docker stop $CI_PROJECT_NAME || true && ssh -p $PRODUCTION_SSH_PORT $SSH_USER@$PRODUCTION_HOST docker rm -f $CI_PROJECT_NAME || true && ssh -p $PRODUCTION_SSH_PORT $SSH_USER@$PRODUCTION_HOST docker rmi -f $RELEASE_IMAGE || true
    - 'eval "DOCKER_RUN_COMMAND=$DOCKER_RUN_TEMPLATE"'
    - 'if [ "$VERBOSE" == "true" ]; then echo "DOCKER_RUN_COMMAND: $DOCKER_RUN_COMMAND"; fi'
  script:
    - ssh -p $PRODUCTION_SSH_PORT $SSH_USER@$PRODUCTION_HOST docker pull $RELEASE_IMAGE
    - ssh -p $PRODUCTION_SSH_PORT $SSH_USER@$PRODUCTION_HOST $DOCKER_RUN_COMMAND
    - service/ci/webHealth.sh -v $VERBOSE -e http://localhost:$APP_PORT/actuator/health -b $TEST_RESPONSE -su $SSH_USER -sh $PRODUCTION_HOST -sp $PRODUCTION_SSH_PORT || HEALTH=$?
    - if [ -n "$HEALTH" ] && (($HEALTH != 0)); then ssh -p $PRODUCTION_SSH_PORT $SSH_USER@$PRODUCTION_HOST "docker logs $CI_PROJECT_NAME"; fi
    - exit
  only:
    - master
  image: buildpack-deps:xenial
  variables:
    D_TARANTOOL_USERNAME: $TARANTOOL_USERNAME
    D_TARANTOOL_PASSWORD: $TARANTOOL_PASSWORD
    D_TARANTOOL_HOST: $TARANTOOL_HOST
    D_TARANTOOL_PORT: $TARANTOOL_PORT
    ELASTICSEARCH_HOST: $ELASTICSEARCH_HOST_FOR_PROD
    INFLUXDB_HOST: $INFLUXDB_HOST_FOR_PROD
    IMAGE_NAME: $RELEASE_IMAGE
    ENVIRONMENT_NAME: production

after_script:
  - echo "End CI"